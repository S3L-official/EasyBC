# can not differential
@cipher Xoodoo_permutation

uint32[12] rc = {18,416,240,896,44,96,20,288,224,960,56,88};

pbox uint[128] p15 = {101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96, 97, 98, 99, 100, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 65, 66, 67, 68};
pbox uint[128] p114 = {110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77};

pbox uint[128] p10 = {96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95};
pbox uint[128] p011 = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106};

pbox uint[128] p01 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96};
pbox uint[128] p28 = {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 65, 66, 67, 68, 69, 70, 71, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96, 97, 98, 99, 100, 101, 102, 103, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 36, 37, 38, 39};

r_fn uint1[384] round_function(uint8 r, uint1[32] key, uint1[384] input) {
    uint1[128] a0 = View(input, 0, 127);
    uint1[128] a1 = View(input, 128, 255);
    uint1[128] a2 = View(input, 256, 383);
    uint1[128] tp = a0 ^ a1;
    uint1[128] p = tp ^ a2;
    #uint1[128] p1 = p >>> 37;
    #uint1[128] p2 = p >>> 46;
    uint1[128] p1 = p15<p>;
    uint1[128] p2 = p114<p>;
    uint1[128] e = p1 ^ p2;
    uint1[128] ta0 = a0 ^ e;
    uint1[128] ta1 = a1 ^ e;
    uint1[128] ta2 = a2 ^ e;

    #ta1 = ta1 >>> 32;
    #ta2 = ta2 >>> 11;
    ta1 = p10<ta1>;
    ta2 = p011<ta2>;
    #for (i from 0 to 31) {
    #    ta0[i] = ta0[i] ^ rc[12 - r][i];
    #}

    uint1[128] b0;
    for (i from 0 to 127) {
        b0[i] = ~ta1[i] & ta2[i];
    }
    uint1[128] b1;
    for (i from 0 to 127) {
        b1[i] = ~ta2[i] & ta0[i];
    }
    uint1[128] b2;
    for (i from 0 to 127) {
        b2[i] = ~ta0[i] & ta1[i];
    }
    uint1[128] ba0 = ta0 ^ b0;
    uint1[128] ba1 = ta1 ^ b1;
    uint1[128] ba2 = ta2 ^ b2;

    #uint1[128] ca1 = ba1 >>> 1;
    #uint1[128] ca2 = ba2 >>> 72;
    uint1[128] ca1 = p01<ba1>;
    uint1[128] ca2 = p28<ba2>;

    uint1[384] rtn;
    for (i from 0 to 127) {
        rtn[i] = ba0[i];
        rtn[i + 128] = ca1[i];
        rtn[i + 256] = ca2[i];
    }
    return rtn;
}

fn uint1[384] enc(uint1[32] key, uint1[384] r_plaintext){
    for (i from 1 to 12) {
        r_plaintext = round_function(i, key, r_plaintext);
    }
    return r_plaintext;
}